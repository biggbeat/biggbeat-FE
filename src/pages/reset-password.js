import { request } from '@/actions'
import ForgotPasswordUI from '@/components/ForgotPasswordUI/ForgotPasswordUI'
import ResetPasswordUI from '@/components/Reset-PasswordUI/ResetPasswordUI'
import {
  ACCESS_TYPES,
  BRAND_NAME,
  LOGIN_PAGE_ROUTE,
  RESEND_OTP_TO_EMAIL_URL,
  RESET_PASSWORD_PAGE_ROUTE,
  RESET_PASSWORD_URL,
  SUCCESS_MESSAGE_TYPE,
  toastMessage,
  VERIFY_OTP_URL,
} from '@/constants'
import { MainContext } from '@/context/MainContext'
import { Form } from 'antd'
import Head from 'next/head'
import { useRouter } from 'next/router'
import { useContext, useEffect, useState } from 'react'

const ResetPassword = (props) => {
  const { MainState, dispatch } = useContext(MainContext)

  const [form] = Form.useForm()
  const router = useRouter()
  const email = props?.email
  const otp = props?.otp

  const [loading, setloading] = useState(false)

  useEffect(() => {
    if (!email || !otp) {
      console.log({ otp })
      router.replace('/')
    }
  }, [])

  const handleSubmit = async (values) => {
    setloading(true)
    console.log({ values })
    const payload = {
      ...values,
      otp,
      email,
    }

    delete payload.confirm_password
    const resetPass = await request({
      apiurl: RESET_PASSWORD_URL,
      data: payload,
    })
    console.log({ resetPass })
    setloading(false)

    if (resetPass?.success) {
      toastMessage(SUCCESS_MESSAGE_TYPE, resetPass?.message)
      router.replace(LOGIN_PAGE_ROUTE.url)
    }
  }

  console.log({ MainState })
  return (
    <>
      <Head>
        <title>{BRAND_NAME}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="page_wrapper_withoutmargin">
        <ResetPasswordUI
          loading={loading}
          form={form}
          handleSubmit={handleSubmit}
        />
      </div>
    </>
  )
}
export default ResetPassword

export async function getServerSideProps(context) {
  let email = context.query?.email || ''
  let otp = context.query?.otp || ''

  return {
    props: {
      accessType: ACCESS_TYPES.AUTH,
      email,
      otp,
    },
  }
}
