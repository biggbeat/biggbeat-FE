import { request } from '@/actions'
import OTPScreenUI from '@/components/OtpInput/OtpScreenUI'
import {
  ACCESS_TYPES,
  BRAND_NAME,
  LOGIN_PAGE_ROUTE,
  RESEND_OTP_TO_EMAIL_URL,
  RESET_PASSWORD_PAGE_ROUTE,
  SUCCESS_MESSAGE_TYPE,
  toastMessage,
  VERIFY_OTP_URL,
} from '@/constants'
import { MainContext } from '@/context/MainContext'
import { Form } from 'antd'
import Head from 'next/head'
import { useRouter } from 'next/router'
import { useCallback, useContext, useEffect, useState } from 'react'

const OTPScreen = (props) => {
  const { MainState, dispatch } = useContext(MainContext)

  const [timer, setTimer] = useState(10)
  const timeOutCallback = useCallback(
    () => setTimer((currTimer) => currTimer - 1),
    []
  )

  const [form] = Form.useForm()
  const router = useRouter()
  const email = props?.email
  const forPage = props?.forPage

  const [loading, setloading] = useState(false)

  const handleSubmit = async (values) => {
    setloading(true)
    console.log({ values })
    const payload = {
      ...values,
      email,
    }
    const verifyOtp = await request({ apiurl: VERIFY_OTP_URL, data: payload })

    console.log({ verifyOtp })
    setloading(false)

    if (verifyOtp?.success) {
      toastMessage(SUCCESS_MESSAGE_TYPE, verifyOtp?.message)
      if (RESET_PASSWORD_PAGE_ROUTE.title === forPage) {
        router.push(
          {
            query: { ...payload, email },
            pathname: RESET_PASSWORD_PAGE_ROUTE.url,
          },
          RESET_PASSWORD_PAGE_ROUTE.url
        )
      } else {
        router.push(LOGIN_PAGE_ROUTE.url)
      }
    }
  }
  useEffect(() => {
    if (!email) {
      router.back()
    }
  }, [])
  console.log({ MainState })

  useEffect(() => {
    timer > 0 && setTimeout(timeOutCallback, 1000)
  }, [timer, timeOutCallback])

  console.log({ timer: `${timer}`?.length })

  const resetTimer = async function () {
    const resendOtp = await request({
      apiurl: RESEND_OTP_TO_EMAIL_URL,
      data: { email },
    })

    if (resendOtp?.success) {
      toastMessage(SUCCESS_MESSAGE_TYPE, resendOtp?.message)
    }
    if (!timer) {
      setTimer(10)
    }
  }
  return (
    <>
      <Head>
        <title>{BRAND_NAME}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="page_wrapper_withoutmargin">
        <OTPScreenUI
          resetTimer={resetTimer}
          timer={timer}
          loading={loading}
          form={form}
          handleSubmit={handleSubmit}
        />
      </div>
    </>
  )
}
export default OTPScreen

export async function getServerSideProps(context) {
  let email = context.query.email
  let forPage = context.query?.forPage || ''

  console.log({ email })
  return {
    props: {
      forPage,
      email: email || null,
      accessType: ACCESS_TYPES.AUTH,
    },
  }
}
